CREATE TABLE Users (
    id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE OIDCSubject (
    sub VARCHAR UNIQUE,
    user_id INT NOT NULL,
    PRIMARY KEY (sub),
    FOREIGN KEY (user_id) REFERENCES Users (id) ON DELETE CASCADE
);

-- CREATE TABLE Scale (
--     id UNIQUE INT NOT NULL,
--     name VARCHAR NOT NULL,
--     PRIMARY KEY (id)
-- );

CREATE TABLE Courses (
    id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR NOT NULL,
    -- scale INT NOT NULL,
    credits INT NOT NULL,
    PRIMARY KEY (id)
    -- FOREIGN KEY (scale) REFERENCES Scale(id)
);

CREATE TABLE ScaleMarks (
    course_id INT NOT NULL,
    -- scale INT NOT NULL,
    score REAL NOT NULL,
    mark VARCHAR NOT NULL,
    grade_point REAL NOT NULL,
    PRIMARY KEY (course_id, score),
    -- PRIMARY KEY (scale, score)
    FOREIGN KEY (course_id) REFERENCES Courses (id) ON DELETE CASCADE
    -- FOREIGN KEY (scale) REFERENCES Scale(id)
);

CREATE TABLE Enrollments (
    id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    course_id INT NOT NULL,
    student_id INT NULL,
    name VARCHAR NOT NULL,
    email VARCHAR NULL,
    metadata VARCHAR,
    PRIMARY KEY (id),
    FOREIGN KEY (course_id) REFERENCES Courses (id) ON DELETE CASCADE,
    FOREIGN KEY (student_id) REFERENCES Users (id) ON DELETE SET NULL
);

CREATE TABLE Instructs (
    course_id INT NOT NULL,
    instructor_id INT NOT NULL,
    PRIMARY KEY (course_id, instructor_id),
    FOREIGN KEY (course_id) REFERENCES Courses (id) ON DELETE CASCADE,
    FOREIGN KEY (instructor_id) REFERENCES Users (id) ON DELETE CASCADE
);

CREATE TABLE Weights (
    id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    course_id INT NOT NULL,
    name VARCHAR NOT NULL,
    weight REAL NOT NULL,
    expected_max_score REAL NULL,
    drop_n INT NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (course_id) REFERENCES Courses (id) ON DELETE CASCADE
);

CREATE TABLE Assignments (
    id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    weight_id INT NOT NULL,
    name VARCHAR NOT NULL,
    max_score REAL,
    PRIMARY KEY (id),
    FOREIGN KEY (weight_id) REFERENCES Weights (id) ON DELETE CASCADE
);

CREATE TABLE Evaluations (
    assignment_id INT NOT NULL,
    enrollee_id INT NOT NULL,
    score REAL NOT NULL,
    evaluated REAL NOT NULL,
    PRIMARY KEY (assignment_id, enrollee_id),
    FOREIGN KEY (assignment_id) REFERENCES Assignments (id) ON DELETE CASCADE,
    FOREIGN KEY (enrollee_id) REFERENCES Enrollments (id) ON DELETE CASCADE
);

CREATE TABLE EnrollmentUserLinkTokens (
    token UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    enrollment_id INT NOT NULL UNIQUE,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (enrollment_id) REFERENCES Enrollments (id) ON DELETE CASCADE
);

CREATE VIEW WeightsCalculated AS
SELECT Weights.id AS id, SUM(Assignments.max_score) AS current_max_score
FROM Weights INNER JOIN Assignments ON Weights.id=Assignments.id
GROUP BY Weights.id;

CREATE VIEW WeightsExtended AS
SELECT Weights.*, current_max_score
FROM Weights INNER JOIN WeightsCalculated ON Weights.id=WeightsCalculated.id;

-- CREATE VIEW EvaluationsExtended AS
-- SELECT Evaluations.*, Assignments.weight AS weight
-- FROM Evaluations INNER JOIN Assignments ON Evaluations.assignment=Assignments.id;

CREATE VIEW EvaluatedWeights AS
SELECT Evaluations.enrollee_id AS enrollee_id, Assignments.weight_id AS weight_id, SUM(Evaluations.score) AS total_score, SUM(Evaluations.evaluated) AS total_evaluated
FROM Evaluations INNER JOIN Assignments ON Evaluations.assignment_id=Assignments.id
GROUP BY enrollee_id, Assignments.weight_id;

CREATE VIEW EvaluatedCourses AS
SELECT EvaluatedWeights.enrollee_id AS enrollee_id,
       WeightsExtended.course_id AS course_id,
       SUM(EvaluatedWeights.total_score*WeightsExtended.weight/WeightsExtended.current_max_score) AS current_weighted_score,
       SUM(EvaluatedWeights.total_evaluated*WeightsExtended.weight/WeightsExtended.current_max_score) AS current_evaluated,
       SUM(EvaluatedWeights.total_score*WeightsExtended.weight/WeightsExtended.expected_max_score) AS expected_weighted_score,
       SUM(EvaluatedWeights.total_evaluated*WeightsExtended.weight/WeightsExtended.expected_max_score) AS expected_evaluated
FROM EvaluatedWeights INNER JOIN WeightsExtended ON EvaluatedWeights.weight_id=WeightsExtended.id
GROUP BY EvaluatedWeights.enrollee_id, WeightsExtended.course_id;

CREATE OR REPLACE FUNCTION process_last_instructs_delete_deletes_course() RETURNS TRIGGER AS $$
    BEGIN
        DELETE FROM Courses
        WHERE id=OLD.course_id AND NOT EXISTS (SELECT 1 FROM Instructs WHERE course_id=OLD.course_id);
        
        RETURN NULL;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER last_instructs_delete_deletes_course
AFTER DELETE ON Instructs
FOR EACH ROW
EXECUTE FUNCTION process_last_instructs_delete_deletes_course();

